#include "talkie.h"

// Initialization of voice codes and objects
const uint8_t spZERO[] PROGMEM = {0x69, 0xFB, 0x59, 0xDD, 0x51, 0xD5, 0xD7, 0xB5, 0x6F, 0x0A, 0x78, 0xC0, 0x52, 0x01, 0x0F, 0x50, 0xAC, 0xF6, 0xA8, 0x16, 0x15, 0xF2, 0x7B, 0xEA, 0x19, 0x47, 0xD0, 0x64, 0xEB, 0xAD, 0x76, 0xB5, 0xEB, 0xD1, 0x96, 0x24, 0x6E, 0x62, 0x6D, 0x5B, 0x1F, 0x0A, 0xA7, 0xB9, 0xC5, 0xAB, 0xFD, 0x1A, 0x62, 0xF0, 0xF0, 0xE2, 0x6C, 0x73, 0x1C, 0x73, 0x52, 0x1D, 0x19, 0x94, 0x6F, 0xCE, 0x7D, 0xED, 0x6B, 0xD9, 0x82, 0xDC, 0x48, 0xC7, 0x2E, 0x71, 0x8B, 0xBB, 0xDF, 0xFF, 0x1F};
const uint8_t spONE[] PROGMEM = {0x66, 0x4E, 0xA8, 0x7A, 0x8D, 0xED, 0xC4, 0xB5, 0xCD, 0x89, 0xD4, 0xBC, 0xA2, 0xDB, 0xD1, 0x27, 0xBE, 0x33, 0x4C, 0xD9, 0x4F, 0x9B, 0x4D, 0x57, 0x8A, 0x76, 0xBE, 0xF5, 0xA9, 0xAA, 0x2E, 0x4F, 0xD5, 0xCD, 0xB7, 0xD9, 0x43, 0x5B, 0x87, 0x13, 0x4C, 0x0D, 0xA7, 0x75, 0xAB, 0x7B, 0x3E, 0xE3, 0x19, 0x6F, 0x7F, 0xA7, 0xA7, 0xF9, 0xD0, 0x30, 0x5B, 0x1D, 0x9E, 0x9A, 0x34, 0x44, 0xBC, 0xB6, 0x7D, 0xFE, 0x1F};
const uint8_t spTWO[]  PROGMEM = {0x06, 0xB8, 0x59, 0x34, 0x00, 0x27, 0xD6, 0x38, 0x60, 0x58, 0xD3, 0x91, 0x55, 0x2D, 0xAA, 0x65, 0x9D, 0x4F, 0xD1, 0xB8, 0x39, 0x17, 0x67, 0xBF, 0xC5, 0xAE, 0x5A, 0x1D, 0xB5, 0x7A, 0x06, 0xF6, 0xA9, 0x7D, 0x9D, 0xD2, 0x6C, 0x55, 0xA5, 0x26, 0x75, 0xC9, 0x9B, 0xDF, 0xFC, 0x6E, 0x0E, 0x63, 0x3A, 0x34, 0x70, 0xAF, 0x3E, 0xFF, 0x1F};
const uint8_t spTHREE[] PROGMEM = {0x0C, 0xE8, 0x2E, 0x94, 0x01, 0x4D, 0xBA, 0x4A, 0x40, 0x03, 0x16, 0x68, 0x69, 0x36, 0x1C, 0xE9, 0xBA, 0xB8, 0xE5, 0x39, 0x70, 0x72, 0x84, 0xDB, 0x51, 0xA4, 0xA8, 0x4E, 0xA3, 0xC9, 0x77, 0xB1, 0xCA, 0xD6, 0x52, 0xA8, 0x71, 0xED, 0x2A, 0x7B, 0x4B, 0xA6, 0xE0, 0x37, 0xB7, 0x5A, 0xDD, 0x48, 0x8E, 0x94, 0xF1, 0x64, 0xCE, 0x6D, 0x19, 0x55, 0x91, 0xBC, 0x6E, 0xD7, 0xAD, 0x1E, 0xF5, 0xAA, 0x77, 0x7A, 0xC6, 0x70, 0x22, 0xCD, 0xC7, 0xF9, 0x89, 0xCF, 0xFF, 0x03};
const uint8_t spFOUR[] PROGMEM = {0x08, 0x68, 0x21, 0x0D, 0x03, 0x1C, 0x90, 0xC0, 0x88, 0x92, 0xB2, 0x29, 0x87, 0x76, 0x2B, 0x2D, 0x5C, 0x7B, 0x06, 0xD9, 0xED, 0x74, 0x64, 0x51, 0x54, 0x4D, 0xA2, 0xBA, 0x99, 0xB7, 0x3A, 0xF8, 0xEA, 0x74, 0xCA, 0xD3, 0x87, 0xBE, 0x94, 0x3D, 0xA4, 0xD4, 0x4E, 0xC9, 0x5F, 0xF7, 0x72, 0xA7, 0x9C, 0x1C, 0x63, 0xDE, 0xF2, 0x9B, 0xBE, 0x34, 0x84, 0x27, 0x2D, 0x4B, 0xF8, 0x53, 0x09, 0x9C, 0x0E, 0xB7, 0xEE, 0xCB, 0x5B, 0x70, 0xDD, 0xB2, 0xFC, 0x3F};
const uint8_t spFIVE[] PROGMEM = {0x08, 0x68, 0x4E, 0x9D, 0x02, 0x1C, 0x60, 0xC0, 0x8C, 0x69, 0x12, 0xB0, 0xC0, 0x28, 0xAB, 0x8C, 0x9C, 0xC0, 0x2D, 0xBB, 0x38, 0x79, 0x31, 0x15, 0xA3, 0xB6, 0xE4, 0x16, 0xB7, 0xDC, 0xF5, 0x6E, 0x57, 0xDF, 0x54, 0x5B, 0x85, 0xBE, 0xD9, 0xE3, 0x5C, 0xC6, 0xD6, 0x6D, 0xB1, 0xA5, 0xBF, 0x99, 0x5B, 0x3B, 0x5A, 0x30, 0x09, 0xAF, 0x2F, 0xED, 0xEC, 0x31, 0xC4, 0x5C, 0xBE, 0xD6, 0x33, 0xDD, 0xAD, 0x88, 0x87, 0xE2, 0xD2, 0xF2, 0xF4, 0xE0, 0x16, 0x2A, 0xB2, 0xE3, 0x63, 0x1F, 0xF9, 0xF0, 0xE7, 0xFF, 0x01};
const uint8_t spSIX[] PROGMEM = {0x04, 0xF8, 0xB9, 0x55, 0x01, 0xBF, 0xA5, 0x1B, 0xE0, 0x37, 0x0F, 0x03, 0xFC, 0x96, 0x61, 0x80, 0xDF, 0x3C, 0x0C, 0xF0, 0x93, 0xDA, 0x4A, 0x87, 0x49, 0x53, 0x91, 0x37, 0x2B, 0x6D, 0xD2, 0x55, 0x23, 0xDE, 0xAC, 0xAA, 0xB9, 0x16, 0x09, 0xFF, 0xB2, 0xFA, 0x66, 0x93, 0x3C, 0x63, 0xF3, 0x9C, 0x10, 0x38, 0x45, 0xA9, 0x0A, 0xD5, 0x00, 0x00, 0x02, 0x14, 0x97, 0xAA, 0x80, 0xAB, 0x6B, 0x0D, 0xF0, 0x63, 0xA5, 0x01, 0x7E, 0xCB, 0x30, 0xC0, 0x6F, 0xE9, 0x0A, 0xF8, 0x25, 0x93, 0x01, 0x3F, 0x57, 0xFC, 0x3F};
const uint8_t spSEVEN[] PROGMEM = {0x0C, 0x78, 0xC6, 0x95, 0x01, 0x3F, 0xA5, 0x28, 0xE0, 0xB7, 0x52, 0x0B, 0x04, 0xE0, 0xB7, 0x54, 0x07, 0xFC, 0x52, 0x66, 0x80, 0x9F, 0xCB, 0x56, 0x59, 0x6C, 0x98, 0x47, 0x3E, 0x59, 0x4D, 0x89, 0x69, 0x66, 0xB9, 0x7A, 0x34, 0x39, 0x86, 0x9B, 0xD9, 0xA6, 0xD4, 0xE7, 0x10, 0xAE, 0xCA, 0xAD, 0x47, 0x97, 0x5D, 0x9A, 0xA9, 0xAE, 0x1A, 0x75, 0xB1, 0xA5, 0x66, 0xF9, 0xB2, 0xD4, 0x4D, 0x63, 0xB6, 0x84, 0x9A, 0x52, 0x76, 0x45, 0x11, 0x1A, 0xAA, 0x4B, 0x31, 0x0C, 0x79, 0x4A, 0xB0, 0x49, 0xC5, 0x50, 0xA2, 0x41, 0xA1, 0xC9, 0x65, 0xD9, 0xAB, 0x89, 0x56, 0x84, 0xFF, 0x07};
const uint8_t spEIGHT[] PROGMEM = {0xAD, 0x1B, 0xDE, 0x58, 0x23, 0x17, 0xAF, 0x6E, 0xE8, 0x20, 0xEB, 0x5C, 0xBC, 0xEA, 0x61, 0x03, 0xAD, 0x73, 0xF6, 0xAA, 0x66, 0x4A, 0xD0, 0xCC, 0xD9, 0xAB, 0x1E, 0x45, 0xC1, 0xA3, 0x66, 0xAF, 0x61, 0x36, 0x03, 0x8B, 0x5A, 0x9C, 0xA6, 0x51, 0x04, 0xA2, 0x66, 0x96, 0xBB, 0xBA, 0x47, 0xEC, 0xED, 0x8A, 0x08, 0x9C, 0xA2, 0x54, 0x85, 0x6A, 0x00, 0x80, 0x02, 0x86, 0x74, 0x63, 0xC0, 0xE6, 0x6A, 0xFF, 0x0F};
const uint8_t spNINE[] PROGMEM = {0x62, 0x75, 0xDC, 0x33, 0xB5, 0x62, 0xB9, 0x25, 0x0B, 0x8E, 0x34, 0x8F, 0xD3, 0xA6, 0xAE, 0x59, 0xD2, 0x34, 0xE9, 0x18, 0x87, 0x27, 0xC9, 0xD0, 0x78, 0xAB, 0x6F, 0xCE, 0xC2, 0x45, 0x1B, 0xAF, 0xB6, 0xF8, 0x51, 0x73, 0x9D, 0xB3, 0x9A, 0x12, 0xC7, 0x2C, 0x6D, 0xC9, 0xAA, 0x73, 0x4B, 0xF3, 0x88, 0x26, 0xAB, 0xCE, 0x2D, 0xCC, 0x23, 0xEA, 0xAC, 0x26, 0xB7, 0xD0, 0x88, 0x98, 0xB3, 0xBA, 0x5C, 0x43, 0x32, 0x7D, 0xCE, 0x1A, 0x4A, 0x0A, 0xCD, 0xF4, 0x39, 0x6B, 0xAA, 0x3E, 0x24, 0xCB, 0x67, 0xAF, 0xB5, 0xD9, 0xE4, 0x18, 0x5F, 0xB4, 0xF6, 0x6E, 0x92, 0x62, 0x7D, 0xD1, 0x38, 0xBA, 0x09, 0xF2, 0x8D, 0x59, 0xED, 0xE8, 0x3A, 0xD8, 0x27, 0x16, 0xA6, 0xBB, 0x7B, 0xF2, 0x74, 0x4F, 0x92, 0x9E, 0x1E, 0xC8, 0x4A, 0xC3, 0x49, 0x7A, 0x9A, 0x25, 0x2B, 0xF5, 0x24, 0xE9, 0xEE, 0xD1, 0x24, 0x25, 0x27, 0xBA, 0xBB, 0x25, 0x51, 0xD3, 0xAA, 0x24, 0xAE, 0x5E, 0x54, 0x55, 0x3A, 0xD4, 0xFF, 0x03};
const uint8_t spTHE[] PROGMEM = {0x08, 0x20, 0xBA, 0x0D, 0x03, 0x69, 0xDF, 0xA8, 0xCD, 0x85, 0x3B, 0xD7, 0x79, 0xF4, 0x59, 0xB7, 0xA9, 0xFA, 0xA2, 0xD5, 0x27, 0xD9, 0x6E, 0x11, 0x8B, 0xC6, 0x90, 0xB4, 0x47, 0xA8, 0x6D, 0xFA, 0x7F};
const uint8_t spAREA[] PROGMEM = {0xA5, 0xAF, 0x89, 0x35, 0xB2, 0x6B, 0xAF, 0xAE, 0xFB, 0x62, 0x6E, 0xDB, 0xBC, 0xEA, 0xEE, 0x46, 0x78, 0x64, 0xCB, 0xAA, 0x6A, 0x6E, 0x96, 0xA1, 0xAE, 0xAB, 0xCA, 0x8B, 0x3D, 0x92, 0xB3, 0xB6, 0x2A, 0x1D, 0x4A, 0x73, 0xCE, 0x3A, 0xEA, 0xB2, 0x29, 0xD5, 0x24, 0xF3, 0xAA, 0xEB, 0x64, 0x09, 0xD3, 0xD5, 0x6B, 0xA8, 0x59, 0x30, 0x32, 0x36, 0xAD, 0xB1, 0x05, 0x07, 0x8F, 0xDC, 0xBC, 0xE6, 0x6A, 0x1D, 0x23, 0xEA, 0xD5, 0x5A, 0x9B, 0x29, 0x0A, 0xCD, 0x4D, 0x6B, 0x6D, 0xAA, 0x38, 0x34, 0x5F, 0xAF, 0xB5, 0xD3, 0xA1, 0xD0, 0x5C, 0xDC, 0xD6, 0xC1, 0x52, 0x5C, 0x65, 0xCF, 0xFF, 0x03};
const uint8_t spIS[] PROGMEM = {0xA3, 0xED, 0xC6, 0x30, 0x3D, 0x57, 0xAD, 0x7E, 0xA8, 0x42, 0xA9, 0x5C, 0xB5, 0xFA, 0xA9, 0x8A, 0xB8, 0x62, 0xF3, 0xEA, 0x86, 0x48, 0xE6, 0x8A, 0x57, 0xAB, 0xEB, 0x22, 0x58, 0x23, 0x5E, 0xAF, 0xAE, 0xCA, 0x64, 0xF5, 0x7C, 0x3C, 0xBA, 0xCA, 0x93, 0xD5, 0xE3, 0x76, 0xEB, 0x3B, 0x4E, 0x55, 0xB3, 0x4D, 0x65, 0xB8, 0x58, 0x5D, 0xDD, 0x72, 0x97, 0xE9, 0x1B, 0x55, 0x27, 0x4D, 0xD3, 0xE6, 0x85, 0xD5, 0x4D, 0x3D, 0x6B, 0xF9, 0x5F, 0x50, 0x1B, 0x26, 0x27, 0x0A, 0xF8, 0xAD, 0x54, 0x01, 0xBF, 0xBA, 0x0B, 0xE0, 0xA7, 0xF4, 0xFF, 0x07};
const uint8_t spPOINT[] PROGMEM = {0x0A, 0xC8, 0x2E, 0x8C, 0x01, 0xD1, 0x85, 0x95, 0x34, 0x8B, 0xAA, 0x74, 0x56, 0xBD, 0xCA, 0xE8, 0xA6, 0xCA, 0x29, 0xCB, 0x2A, 0x92, 0xEE, 0xCA, 0xA4, 0x36, 0x2B, 0x2F, 0xAA, 0x3C, 0x43, 0x9A, 0xAC, 0xBC, 0x78, 0xF3, 0xD0, 0x68, 0xD4, 0xB2, 0x6A, 0x45, 0x4A, 0x2A, 0xA6, 0xC9, 0x93, 0xC4, 0x29, 0x09, 0xC7, 0x24, 0x8D, 0xB1, 0xD3, 0xCD, 0x08, 0x21, 0x70, 0x8A, 0x52, 0x15, 0xAA, 0x01, 0xE0, 0x80, 0x63, 0xC2, 0x14, 0x70, 0x94, 0x19, 0x01, 0xA6, 0x32, 0xFB, 0x7F};

Talkie voice;

// Initializing of global varibles 
uint8_t agol_za_sledno_vrtenje;

// Initializing of parameters
void setup() {

  // Initialize motor supply
  pinMode (11, INPUT);
  pinMode (12, OUTPUT);

  // Initialize all four poles of the motor
  pinMode (4, OUTPUT);
  pinMode (5, OUTPUT);
  pinMode (6, OUTPUT);
  pinMode (7, OUTPUT);

  // Initializion of push button
  pinMode (8, INPUT);

  Serial.begin(9600);
}

// Functions

void vrti(); // Rotate the motor
uint8_t measure(); // Calculate the distance betwen the ultrasound sensor and the wall
uint8_t najkratko_rastojanie(); // Find the distance which is 0 degree with the respect to the sensor (smallest distance) 
void sort(uint8_t register niza[], uint8_t register niza_index[]); // Sorting elements, also sorts their indexes
void swap(uint8_t register *a, uint8_t register *b, uint8_t register *index_1, uint8_t register *index_2); // Changes places(subfuction of sort()) 

// Main Program

void loop() {

  // Inicializing of variables
  uint8_t register brojac = 0, k = 0, niza[7];
  float register a, b, c, d, plostina;

  uint8_t x = digitalRead(8); // Inicializing the push button to variable

  if (x == LOW) // If the push button is pressed (LOW) start the program
  {
    delay(5000);

    // Area Measurment

    a = najkratko_rastojanie() * cos(0.0244346); // Correction because of error in the function: najkratko_rastojanie(), on every other side of the angle the correction increments 

    while (brojac < agol_za_sledno_vrtenje) // Rotate the motor for known angle so it gets to the smallest distance 
    {
      vrti();
      brojac++;
    }
    b = measure() * cos(0.06440265);
    brojac = 0;

    while (brojac < 128) // Rotate the motor for 90 degree to find the third smallest distance 
    {
      vrti();
      brojac++;
    }
    c = measure() * cos(0.0890118);
    brojac = 0;

    while (brojac < 128) // Rotate the motor again for 90 degree to find the fourth smallest distance  
    {
      vrti();
      brojac++;
    }
    d = measure() * cos(0.115192) ;

    plostina = (a + c) * (b + d) + 56; // Calculate the area and adds 56 cm^2 because of the are of the used arduino area 
    // If you use different device to calculate the area, be sure to change 56 cm^2

    // Аlgorithm for number separation from the area value
    while (k < 4) // Because the area is converted to meters, only 4 decima numbres are represented, so the counter k < 4 
    {
      niza[k] = (int)plostina % 10; // Seperate the last number from the whole number and append to the array
      plostina /= 10; // Devide the area
      k++;
    }
    niza[k] = 10; // Number which is used to trigger the function voice.say(spPOINT)
    k++;
    niza[k] = (int)plostina; // Appending the last number which must be with one place 

    //  Pronunciation of the area, delay(200) is used for more clearly pronunciation
    voice.say(spTHE);
    delay(200);
    voice.say(spAREA);
    delay(200);
    voice.say(spIS);

    // Pronunciation of the numbers, beggining with the last element, because that element was on that position firstly
    for (brojac = k + 1; brojac > 0; brojac--)
    {
      delay(200);
      switch (niza[brojac - 1]) {
        case 0: voice.say(spZERO);
          break;
        case 1: voice.say(spONE);
          break;
        case 2: voice.say(spTWO);
          break;
        case 3: voice.say(spTHREE);
          break;
        case 4: voice.say(spFOUR);
          break;
        case 5: voice.say(spFIVE);
          break;
        case 6: voice.say(spSIX);
          break;
        case 7: voice.say(spSEVEN);
          break;
        case 8: voice.say(spEIGHT);
          break;
        case 9: voice.say(spNINE);
          break;
        case 10: voice.say(spPOINT);
          break;
      }
    }
  }
}

// Function Codes

void vrti()
{
  // Writes all motor poles; energize one pole, than enegrize the next pole, than deenergize the previous pole and energize the next pole, repeat
  digitalWrite(5, HIGH);
  delayMicroseconds(1000);

  digitalWrite(4, LOW);
  delayMicroseconds(1000);

  digitalWrite(6, HIGH);
  delayMicroseconds(1000);

  digitalWrite(5, LOW);
  delayMicroseconds(1000);

  digitalWrite(7, HIGH);
  delayMicroseconds(1000);

  digitalWrite(6, LOW);
  delayMicroseconds(1000);

  digitalWrite(4, HIGH);
  delayMicroseconds(1000);

  digitalWrite(7, LOW);
  delayMicroseconds(1000);
}


uint8_t measure()
{
  uint16_t register rastojanie;
  digitalWrite (12, LOW);
  delayMicroseconds (2);
  digitalWrite (12, HIGH);
  delayMicroseconds (10);
  digitalWrite (12, LOW);
  delayMicroseconds (2);
  rastojanie = pulseIn (11, HIGH);
  uint8_t register rastojanie_cm = (rastojanie) / 58;
  return rastojanie_cm;
}

void swap(uint8_t register *a, uint8_t register *b, uint8_t register *index_1, uint8_t register *index_2)
{
  // Element sorting
  uint8_t register temp = *a;
  *a = *b;
  *b = temp;

  // Index sorting
  temp = *index_1;
  *index_1 = *index_2;
  *index_2 = temp;
}

void sort(uint8_t register niza[], uint8_t register niza_index[])
{
  uint8_t register j;
  for (uint8_t register i; i < 2; i++)
    for (j = i + 1; j < 3; j++)
      if (niza[j] > niza[i])
      {
        swap(&niza[i], &niza[j], &niza_index[i], &niza_index[j]);
      }
}

uint8_t najkratko_rastojanie() // Rotates the motor for 9.84 degree and thant rotate 88.6 degree more while calculating the distance at every 9.84 degree
{
  uint8_t register niza[3], niza_index[3], j, f = 0;

  // Appent the array with the frist three measurments 
  for (j = 0; j < 3; j++)
  {
    niza[j] = measure();
    niza_index[j] = j;
    while (f < 14) // Rotate the motor 14 times, 9.84 degree at a time
    {
      vrti();
      f++;
    }
    f = 0; // Reset the counter in charge for counting the motor rotation
  }
  sort(niza, niza_index); // Sort the array in that way, that the highest number (highest distance), which is not usefull, put on 0 index in the array

  // Rotates the motor and measuter till 88.6 degree
  for (j = 3; j < 9; j++)
  {
    // The new measured distance puts on the index 0 place, the place where the highest number is (highes distance), than rotates the motor nad sort again
    niza[0] = measure();
    niza_index[0] = j;
    while (f < 14)
    {
      vrti();
      f++;
    }
    f = 0;
    sort(niza, niza_index);
  }

  agol_za_sledno_vrtenje = niza_index[2] * 14; // Calculate the angle which is required to find the next smallest distance (multiply with 14, because with updating the index, the motor has already rotate for 14 times)

  return niza[2];
}
